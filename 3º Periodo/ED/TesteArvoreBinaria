import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Classe do no da arvore
class No {
    int valor;
    No esquerda, direita;

    public No(int valor) {
        this.valor = valor;
        this.esquerda = null;
        this.direita = null;
    }
}

// Classe da Arvore Binaria
class ArvoreBinaria {
    No raiz;

    // Metodo para inserir um valor na arvore
    public void inserir(No node, int valor) { 
        if (node != null) {
            if (valor < node.valor) {
                if (node.esquerda != null) {
                    inserir(node.esquerda, valor);
                } else {
                    System.out.println("Inserindo " + valor + " a esquerda de " + node.valor);
                    node.esquerda = new No(valor);
                }
            } else if (valor > node.valor) {
                if (node.direita != null) {
                    inserir(node.direita, valor);
                } else {
                    System.out.println("Inserindo " + valor + " a direita de " + node.valor);
                    node.direita = new No(valor);
                }
            }
        }
    }

    // Metodo para remover o menor valor da arvore
    public No removeValorMinimoDaArvore(No node) {
        if (node == null) {
            System.out.println("ERRO: Arvore vazia");
            return null;
        } else if (node.esquerda != null) {
            node.esquerda = removeValorMinimoDaArvore(node.esquerda);
            return node;
        } else {
            return node.direita;
        }
    }

    // Percurso em pre-ordem (prefixado)
    public void prefixado(No no) {
        if (no != null) {
            System.out.print(no.valor + " ");
            prefixado(no.esquerda);
            prefixado(no.direita);
        }
    }

    // Percurso em pos-ordem (posfixado)
    public void posfixado(No no) {
        if (no != null) {
            posfixado(no.esquerda);
            posfixado(no.direita);
            System.out.print(no.valor + " ");
        }
    }

    // Percurso em ordem (em ordem)
    public void emordem(No no) {
        if (no != null) {
            emordem(no.esquerda);
            System.out.print(no.valor + " ");
            emordem(no.direita);
        }
    }
}

// Classe principal para testar a Arvore Binaria
public class TesteArvoreBinaria {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArvoreBinaria arvore = new ArvoreBinaria();

        System.out.println("Escolha uma opcao para inserir valores:");
        System.out.println("1 - Usar lista pre-definida de valores");
        System.out.println("2 - Inserir valores manualmente");
        int opcao = scanner.nextInt();

        List<Integer> valores = new ArrayList<>();
        
        if (opcao == 1) {
            // Lista pre-definida de valores
            valores.add(10);
            valores.add(5);
            valores.add(15);
            valores.add(3);
            valores.add(7);
            valores.add(13);
            valores.add(18);
            System.out.println("Usando a lista pre-definida: " + valores);
        } else if (opcao == 2) {
            System.out.println("Insira os valores (digite 'sair' para parar):");
            while (true) {
                String input = scanner.next();
                if (input.equalsIgnoreCase("sair")) break;
                
                try {
                    int valor = Integer.parseInt(input);
                    valores.add(valor);
                } catch (NumberFormatException e) {
                    System.out.println("Entrada invalida. Digite um numero inteiro ou 'sair' para finalizar.");
                }
            }
            System.out.println("Valores inseridos: " + valores);
        } else {
            System.out.println("Opcao invalida!");
            scanner.close();
            return;
        }

        // Inserir os valores na arvore
        if (!valores.isEmpty()) {
            arvore.raiz = new No(valores.get(0)); // Primeiro valor como raiz
            for (int i = 1; i < valores.size(); i++) {
                arvore.inserir(arvore.raiz, valores.get(i));
            }
        }

        System.out.println("\nPercurso em Pre-Ordem:");
        arvore.prefixado(arvore.raiz);
        System.out.println("\n");

        System.out.println("Percurso em Pos-Ordem:");
        arvore.posfixado(arvore.raiz);
        System.out.println("\n");

        System.out.println("Percurso em Ordem:");
        arvore.emordem(arvore.raiz);
        System.out.println("\n");

        // Remocao do menor valor
        System.out.println("Removendo o menor valor da arvore:");
        arvore.raiz = arvore.removeValorMinimoDaArvore(arvore.raiz);
        
        System.out.println("Percurso em Ordem apos remocao do menor valor:");
        arvore.emordem(arvore.raiz);
        System.out.println();

        scanner.close();
    }
}
